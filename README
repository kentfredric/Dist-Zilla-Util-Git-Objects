NAME
    Dist::Zilla::Util::Git::Objects - Object oriented interface to map
    "SHA1"s.

VERSION
    version 0.001000

SYNOPSIS
        my $o = Dist::Zilla::Util::Git::Objects->new(
            zilla => $self->zilla
        );
        my $b = Dist::Zilla::Util::Git::Branches->new(
            zilla => $self->zilla
        );
        my $commit = $o->get_commit( $b->get_branch('master')->sha1 );
        print "Last commit message is" . join q[\n] , @{ $commit->object_content };

        my $tree  = $o->get_commit( $commit->get_header_string('tree' ) );

        for my $entry (@{ $tree->entries } ) {
            printf "%s %s\n", $entry->mode, $entry->filename;
        }

METHODS
  "get_object"
    Resolve the given name to an object

        my $object = $dzugo->get_object('deadbeefc0ffee');

    Can also resolve any rev that resolves to a commit

        my $object = $dzugo->get_object('master');

    Though this is not recommended due to ambiguity potential.

        my $object = $dzugo->get_object( $b->get_branch('master')->sha1  );
        my $object = $dzugo->get_object( $b->get_tag('master')->sha1  );

  "get_commit_at"
    Resolve a "rev" to a commit.

    This is only really useful in cases where "rev" is possibly a resolvant
    for an annotated "tag".

    Here, "get_commit_at" will follow the annotated "tag" to find the
    "commit".

    So you should always use this method instead of calling "get_object"
    directly if you're always expecting to git a "commit" back.

        my $o = $dzugo->get_object('1.2.0'); # Resolves to annotated tag

        my $o = $dzugo->get_commit_at('1.2.0'); # Annotated tag resolves to commit

  "get_tree_at"
    Like "get_commit_at", this method will follow object pointers digging
    until it finds a "tree" object.

    So this means:

        ref → annotated tag → commit → tree →
        ref →                 commit → tree →
        ref →                          tree →

    This is useful in cases where you expect a tree always.

        my $t = $dzguo->get_tree_at('master'); # masters tree

  "get_tree_at_path"
    This Further extends upon the logic of "get_tree_at" and will resolve
    tree objects that are found at the given path at the given commit.

        my $t = $dzugo->get_tree_at('master', 'lib' );
        my $t = $dzugo->get_tree_at('master', 'lib/Dist' );
        my $t = $dzugo->get_tree_at('master', 'lib/Dist/Foo' );

    Implementationwise, this invokes

        my $sha = $dzugo->get_tree_at('master')->sha1;

    In order to dig down to a tree of some description based on the search
    term.

    If the search term is already a tree ref, then it proceeds to do path
    traversal, returning undef as soon as it can't proceed further,
    returning the tree at the given path.

    Though, it will always resolve to a "tree"

    If you specified the path to a "blob", this will return "undef".

  "get_blob_at"
    This method resolves a path to a blob ( which you will probably see as
    being a files contents ).

        my $blob = $dzugo->get_blob_at('master','.gitignore');
        my $blob = $dzugo->get_blob_at('master','lib/Foo.pm');

    This is implemented in terms of

        my $tree =  $dzugo->get_blob_at('master','lib');
        my $entry = $tree->entry_named('Foo.pm');
        return $dzugo->get_object($entry);

    But will fail if "Foo.pm" is a tree instead of a blob.

    Otherwise, if the path does not exist at the give commit, it will return
    undef.

AUTHOR
    Kent Fredric <kentfredric@gmail.com>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2013 by Kent Fredric
    <kentfredric@gmail.com>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

